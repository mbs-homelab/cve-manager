package database

import (
	"cve-manager/nist"
	"encoding/json"
	"time"

	log "github.com/sirupsen/logrus"
	"golang.org/x/exp/slices"
	"gorm.io/datatypes"
	"gorm.io/gorm"
)

type Cve struct {
	CveId        string `gorm:"primaryKey"`
	Cpe          string `gorm:"primaryKey"`
	Url          string
	Description  string
	Raw          datatypes.JSON
	LastModified time.Time
	CreatedAt    time.Time
	UpdatedAt    time.Time
	DeletedAt    gorm.DeletedAt `gorm:"index"`
}

func SaveCves(result *nist.CveSearchResult, cpe string) {
	for _, vulnerability := range result.Vulnerabilities {
		var savedCve Cve
		result := database.Where(&Cve{CveId: vulnerability.Cve.ID, Cpe: cpe}).First(&savedCve)
		lastModified, err := time.Parse(nist.TimeLayout, vulnerability.Cve.LastModified)
		if err != nil {
			currentTime := time.Now()
			log.Errorf("cannot parse modification time %s. Assuming current time %s", vulnerability.Cve.LastModified, currentTime.String())
			lastModified = currentTime
		}
		if result.Error != nil || lastModified.After(savedCve.LastModified) {
			if result.Error != nil {
				log.Infof("%s not in database", vulnerability.Cve.ID)
			} else {
				log.Infof("%s was modified. Updating local records", vulnerability.Cve.ID)
			}
			enDescIdx := slices.IndexFunc(vulnerability.Cve.Descriptions, func(d nist.Description) bool { return d.Lang == "en" })
			rawData, err := json.Marshal(vulnerability)
			if err != nil {
				log.Errorf("error marshalling raw data %w", err)
			}
			cve := Cve{
				CveId:        vulnerability.Cve.ID,
				Cpe:          cpe,
				Description:  vulnerability.Cve.Descriptions[enDescIdx].Value,
				Url:          vulnerability.Cve.References[0].URL,
				Raw:          datatypes.JSON(rawData),
				LastModified: lastModified,
			}
			database.Save(&cve)
			if database.Error != nil {
				log.Errorf("error saving cVE %w", database.Error)
			} else {
				log.Infof("saved CVE %s for CPE %s", vulnerability.Cve.ID, cpe)
			}
		} else {
			log.Infof("%s already in database and no change was detected", vulnerability.Cve.ID)
		}

	}
}
