import { ChangeDetectionStrategy, Component, InputSignal, ModelSignal, OutputEmitterRef, WritableSignal, forwardRef, input, model, output, signal } from '@angular/core';
import { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { TranslateModule } from '@ngx-translate/core';

@Component({
    selector: 'cve-search',
    standalone: true,
    templateUrl: './search.component.html',
    styleUrl: './search.component.scss',
    changeDetection: ChangeDetectionStrategy.OnPush,
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => SearchComponent),
            multi: true
        }
    ],
    imports: [
        MatFormFieldModule,
        MatInputModule,
        MatIconModule,
        MatButtonModule,
        FormsModule,
        TranslateModule,
    ],
})
export class SearchComponent implements ControlValueAccessor {

    placeholder: InputSignal<string> = input<string>('');

    searchValue: ModelSignal<string | null> = model<string | null>(null);

    isDisabled: WritableSignal<boolean> = signal<boolean>(false);

    readonly enter: OutputEmitterRef<void> = output<void>();

    private onChange: ((value: string | null) => void) | undefined;

    private onTouched: (() => void) | undefined;

    emitChange(): void {
        if (this.onChange) {
            this.onChange(this.searchValue());
        }
        if (this.onTouched) {
            this.onTouched();
        }
    }

    handleEnterClickOrKeyboardDown(): void {
        this.enter.emit();
    }

    writeValue(value: string | null): void {
        this.searchValue.set(value);
    }

    registerOnChange(onChange: (value: string | null) => void): void {
        this.onChange = onChange;
    }

    registerOnTouched(onTouched: () => void): void {
        this.onTouched = onTouched;
    }

    setDisabledState(isDisabled: boolean): void {
        this.isDisabled.set(isDisabled);
    }
}
