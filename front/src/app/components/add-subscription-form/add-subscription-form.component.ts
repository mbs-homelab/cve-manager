import { ChangeDetectionStrategy, Component, effect, input, InputSignal } from '@angular/core';
import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { TranslateModule } from '@ngx-translate/core';
import { nistGetComponentFromCpeName } from '../../utils/nist-get-component-from-cpe-name.util';

export interface AddSubscriptionFormValue {
    cpeName: string;
    displayLabel: string | null;
    product: string;
    vendor: string | null;
}


export interface AddSubscriptionFormGroup {
    cpeName: FormControl<string | null>;
    displayLabel: FormControl<string | null>;
    product: FormControl<string | null>;
    vendor: FormControl<string | null>;
}

@Component({
    selector: 'cve-add-subscription-form',
    standalone: true,
    templateUrl: './add-subscription-form.component.html',
    styleUrl: './add-subscription-form.component.scss',
    changeDetection: ChangeDetectionStrategy.OnPush,
    imports: [
        ReactiveFormsModule,
        MatFormFieldModule,
        MatInputModule,
        TranslateModule,
    ],
})
export class AddSubscriptionFormComponent {

    initializeWithCpeName: InputSignal<string | null> = input<string | null>(null);

    addSubscriptionForm: FormGroup<AddSubscriptionFormGroup> = new FormGroup<AddSubscriptionFormGroup>({
        cpeName: new FormControl(null),
        displayLabel: new FormControl(null),
        product: new FormControl(null),
        vendor: new FormControl(null),
    });

    constructor() {
        effect(() => {
            const initialCpeName: string | null = this.initializeWithCpeName();
            if (initialCpeName) {
                const product: string = nistGetComponentFromCpeName(initialCpeName, 'product');
                const vendor: string = nistGetComponentFromCpeName(initialCpeName, 'vendor');
                this.addSubscriptionForm.patchValue({
                    cpeName: initialCpeName,
                    displayLabel: `${vendor} â€” ${product}`,
                    product,
                    vendor,
                });
            }
        });
    }

}
