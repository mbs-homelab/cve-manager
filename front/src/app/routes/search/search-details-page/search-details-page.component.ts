import { AsyncPipe, JsonPipe } from '@angular/common';
import { HttpStatusCode } from '@angular/common/http';
import { ChangeDetectionStrategy, Component, computed, signal, Signal, WritableSignal } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { TranslateModule } from '@ngx-translate/core';
import { NistCpe } from '../../../../api/nist/models/nist-cpe.model';
import { NistCpeService } from '../../../../api/nist/services/nist-cpe.service';
import { Page } from '../../../../models/page.model';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';

const cpeNameRegex: RegExp = /^([^:]+:){12}[^:]+$/;
const millisecondsInMinute: number = 60000;

@Component({
    selector: 'cve-search-details-page',
    standalone: true,
    templateUrl: './search-details-page.component.html',
    styleUrl: './search-details-page.component.scss',
    changeDetection: ChangeDetectionStrategy.OnPush,
    imports: [
        AsyncPipe,
        JsonPipe,
        TranslateModule,
        MatProgressSpinnerModule,
    ],
})
export class SearchDetailsPageComponent {

    cpeName: string | null = null;

    isCpeNameValid: boolean = false;

    readonly rateLimitReached: WritableSignal<boolean> = signal<boolean>(false);

    readonly pendingData: Signal<boolean> = computed(() => this.rateLimitReached() || this.requestPending());

    readonly currentCpe: WritableSignal<NistCpe[]> = signal<NistCpe[]>([]);

    private page: Page = {
        pageIndex: 0,
        pageSize: 10,
    };

    private readonly requestPending: WritableSignal<boolean> = signal<boolean>(false);

    constructor(
        private readonly nistCpeService: NistCpeService,
        private readonly activatedRoute: ActivatedRoute,
    ) {
        this.cpeName = this.activatedRoute.snapshot.params['name'];

        if (this.cpeName) {
            this.isCpeNameValid = cpeNameRegex.test(this.cpeName);
            if (this.isCpeNameValid) {
                this.getData(this.cpeName);
            }
        }
    }

    getData(cpeName: string): void {
        const result: string = cpeName.replaceAll(/(:-)*(:\*)+$/g, '');
        if (this.requestPending()) {
            return;
        }
        this.requestPending.set(true);
        this.nistCpeService
            .searchCpesCollection('cpeMatchString', result, this.page)
            .subscribe({
                next: result => {
                    this.currentCpe.set(result.products.map(product => product.cpe));
                    this.requestPending.set(false);
                },
                error: err => {
                    if (err.status === HttpStatusCode.NotFound) {
                        console.log('NotFound', err);
                    }
                    if (err.status === 0 || err.status === HttpStatusCode.TooManyRequests) {
                        this.rateLimitReached.set(true);
                        setTimeout(() => this.rateLimitReached.set(false), millisecondsInMinute);
                    }
                    this.currentCpe.set([]);
                    this.requestPending.set(false);
                },
            });
    }
}
