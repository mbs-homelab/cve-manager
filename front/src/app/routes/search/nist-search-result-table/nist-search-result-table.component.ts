import { DatePipe, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, InputSignal, OutputEmitterRef, input, output } from '@angular/core';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatTableModule } from '@angular/material/table';
import { RouterLink } from '@angular/router';
import { TranslateModule } from '@ngx-translate/core';
import { NistCpe } from '../../../../api/nist/models/nist-cpe.model';
import { Page } from '../../../../models/page.model';
import { NistGetComponentFromCpeNamePipe } from '../../../pipes/nist-get-component-from-cpe-name.pipe';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTooltipModule } from '@angular/material/tooltip';

@Component({
    selector: 'cve-nist-search-result-table',
    standalone: true,
    templateUrl: './nist-search-result-table.component.html',
    styleUrl: './nist-search-result-table.component.scss',
    changeDetection: ChangeDetectionStrategy.OnPush,
    imports: [
        NgIf,
        MatTableModule,
        MatProgressSpinnerModule,
        DatePipe,
        NistGetComponentFromCpeNamePipe,
        MatPaginatorModule,
        TranslateModule,
        RouterLink,
        MatIconModule,
        MatButtonModule,
        MatTooltipModule,
    ]
})
export class NistSearchResultTableComponent {
    currentData: InputSignal<NistCpe[]> = input<NistCpe[]>([]);

    pending: InputSignal<boolean> = input<boolean>(false);

    currentPage: InputSignal<Page> = input.required<Page>();

    displayedColumns: string[] = ['cpeName', 'vendor', 'product', 'version', 'lastModified', 'actions'];

    readonly cpeSelected: OutputEmitterRef<NistCpe> = output<NistCpe>();

    readonly pageChange: OutputEmitterRef<number> = output<number>();

    handleRowClicked(data: NistCpe): void {
        this.cpeSelected.emit(data);
    }

    handlePageChange(pageIndex: number): void {
        this.pageChange.emit(pageIndex);
    }
}
