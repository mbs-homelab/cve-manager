import { ChangeDetectionStrategy, Component, ModelSignal, Signal, WritableSignal, computed, inject, model, signal } from '@angular/core';
import { SearchComponent } from '../../components/search/search.component';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { NistCpe, NistCpeSearchParameter } from '../../../api/nist/models/nist-cpe.model'
import { SearchOption, searchOptions } from './search-options.const';
import { FormsModule } from '@angular/forms';
import { NistCpeService } from '../../../api/nist/services/nist-cpe.service';
import { Page } from '../../../models/page.model';
import { JsonPipe } from '@angular/common';
import { HttpStatusCode } from '@angular/common/http';
import { NistSearchResultTableComponent } from './nist-search-result-table/nist-search-result-table.component';
import { TranslateModule } from '@ngx-translate/core';
import { MatIconModule } from '@angular/material/icon';
import { ActivatedRoute, Router } from '@angular/router';

const millisecondsInMinute: number = 60000;

@Component({
    selector: 'cve-search-page',
    standalone: true,
    templateUrl: './search-page.component.html',
    styleUrl: './search-page.component.scss',
    changeDetection: ChangeDetectionStrategy.OnPush,
    imports: [
        FormsModule,
        JsonPipe,
        MatButtonToggleModule,
        SearchComponent,
        NistSearchResultTableComponent,
        TranslateModule,
        MatIconModule,
    ],
})
export class SearchPageComponent {

    readonly rateLimitReached: WritableSignal<boolean> = signal<boolean>(false);

    readonly pendingData: Signal<boolean> = computed(() => this.rateLimitReached() || this.requestPending());

    readonly currentCpe: WritableSignal<NistCpe[]> = signal<NistCpe[]>([]);

    readonly searchOptions: SearchOption[] = searchOptions;

    readonly currentNistCpeSearchParameter: ModelSignal<NistCpeSearchParameter> = model<NistCpeSearchParameter>('keywordSearch');

    readonly page: Page = {
        pageIndex: 0,
        pageSize: 5,
    };

    private lastSearchValue: string | undefined;

    private readonly requestPending: WritableSignal<boolean> = signal<boolean>(false);

    private readonly nistCpeService: NistCpeService = inject(NistCpeService);

    private readonly router: Router = inject(Router);

    private readonly activatedRoute: ActivatedRoute = inject(ActivatedRoute);

    handleSearch(searchValue: string): void {
        if (this.requestPending()) {
            return;
        }
        this.lastSearchValue = searchValue;
        this.requestPending.set(true);
        this.nistCpeService
            .searchCpesCollection(this.currentNistCpeSearchParameter(), searchValue, this.page)
            .subscribe({
                next: result => {
                    const cpes: NistCpe[] = result?.products?.map(product => product.cpe);
                    this.currentCpe.set(cpes);
                    this.page.itemsLength = result?.totalResults;
                    this.requestPending.set(false);
                },
                error: err => {
                    if (err.status === HttpStatusCode.NotFound) {
                        console.log('NotFound', err);
                    }
                    if (err.status === 0 || err.status === HttpStatusCode.TooManyRequests) {
                        this.rateLimitReached.set(true);
                        setTimeout(() => this.rateLimitReached.set(false), millisecondsInMinute);
                    }
                    console.log(err)
                    this.currentCpe.set([]);
                    this.requestPending.set(false);
                },
            });
    }

    handleCpeSelected(nistCpe: NistCpe): void {
        console.log(nistCpe.cpeName)
        // this.router.navigate(['name', nistCpe.cpeName], { relativeTo: this.activatedRoute })
    }

    handlePageChange(pageIndex: number): void {
        this.page.pageIndex = pageIndex;
        if (this.lastSearchValue) {
            this.handleSearch(this.lastSearchValue);
        }
    }
}
