import { JsonPipe } from '@angular/common';
import { HttpStatusCode } from '@angular/common/http';
import { ChangeDetectionStrategy, Component, computed, inject, Signal, signal, WritableSignal } from '@angular/core';
import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatIconModule } from '@angular/material/icon';
import { MatTooltipModule } from '@angular/material/tooltip';
import { TranslateModule } from '@ngx-translate/core';
import { NistCpe } from '../../../api/nist/models/nist-cpe.model';
import { NistCpeService } from '../../../api/nist/services/nist-cpe.service';
import { Page } from '../../../models/page.model';
import { SearchComponent } from '../../components/search/search.component';
import { NistSearchResultTableComponent } from './nist-search-result-table/nist-search-result-table.component';

const millisecondsInMinute: number = 60000;

@Component({
    selector: 'cve-search-page',
    standalone: true,
    templateUrl: './search-page.component.html',
    styleUrl: './search-page.component.scss',
    changeDetection: ChangeDetectionStrategy.OnPush,
    imports: [
        FormsModule,
        JsonPipe,
        MatButtonToggleModule,
        MatButtonModule,
        SearchComponent,
        NistSearchResultTableComponent,
        TranslateModule,
        MatIconModule,
        ReactiveFormsModule,
        MatTooltipModule,
    ],
})
export class SearchPageComponent {

    readonly rateLimitReached: WritableSignal<boolean> = signal<boolean>(false);

    readonly pendingData: Signal<boolean> = computed(() => this.rateLimitReached() || this.requestPending());

    readonly currentCpe: WritableSignal<NistCpe[]> = signal<NistCpe[]>([]);

    readonly page: Page = {
        pageIndex: 0,
        pageSize: 10,
    };

    protected readonly vendorControl: FormControl<string | null> = new FormControl<string | null>(null);

    protected readonly productControl: FormControl<string | null> = new FormControl<string | null>(null);

    private readonly requestPending: WritableSignal<boolean> = signal<boolean>(false);

    private readonly nistCpeService: NistCpeService = inject(NistCpeService);

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    handleCpeSelected(nistCpe: NistCpe): void {
        // this.router.navigate(['name', nistCpe.cpeName], { relativeTo: this.activatedRoute })
    }

    handlePageChange(pageIndex: number): void {
        this.page.pageIndex = pageIndex;
        this.handleSearch();
    }


    handleSearch(): void {
        const cpeString: string | null = this.getCpeString();
        if (this.requestPending() || !cpeString) {
            return;
        }
        this.requestPending.set(true);
        this.nistCpeService
            .searchCpesCollection('cpeMatchString', cpeString, this.page)
            .subscribe({
                next: result => {
                    const cpes: NistCpe[] = result?.products?.map(product => product.cpe);
                    this.currentCpe.set(cpes);
                    this.page.itemsLength = result?.totalResults;
                    this.requestPending.set(false);
                },
                error: err => {
                    if (err.status === HttpStatusCode.NotFound) {
                        console.log('NotFound', err);
                    }
                    if (err.status === 0 || err.status === HttpStatusCode.TooManyRequests) {
                        this.rateLimitReached.set(true);
                        setTimeout(() => this.rateLimitReached.set(false), millisecondsInMinute);
                    }
                    console.log(err)
                    this.currentCpe.set([]);
                    this.requestPending.set(false);
                },
            });
    }

    handleSwapVendorProduct(): void {
        const temp: string | null = this.productControl.value;
        this.productControl.setValue(this.vendorControl.value);
        this.vendorControl.setValue(temp);
    }

    handleCopyProductToVendor(): void {
        this.vendorControl.setValue(this.productControl.value);
    }

    handleCopyVendorToProduct(): void {
        this.productControl.setValue(this.vendorControl.value);
    }

    private setDisabledState(isDisabled: boolean): void {
        if (isDisabled) {
            this.productControl.disable();
            this.vendorControl.disable();
        } else {
            this.productControl.enable();
            this.vendorControl.enable();
        }
    }

    private getCpeString(): string | null {
        const vendor: string | undefined = this.vendorControl.value?.toLowerCase();
        const product: string | undefined = this.productControl.value?.toLowerCase();

        if (vendor && product) {
            return `cpe:2.3:*:${vendor}:${product}`;

        } else if (vendor) {
            return `cpe:2.3:*:${vendor}`
        } else if (product) {
            return `cpe:2.3:*:${product}`
        }

        return null;
    }
}
