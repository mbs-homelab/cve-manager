package api

import (
	"cve-manager/database"
	"net/http"
	"strconv"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

func addCpeRoutes(group *echo.Group) {
	group.Use(middleware.Logger())
	group.Use(middleware.Recover())
	group.Use(middleware.AddTrailingSlash())

	group.GET("/", getAllCpes)
	group.GET("/:id", getCpe)
	group.POST("/", addCpe)
	group.PATCH("/:id", updateCpe)
	group.DELETE("/:id", deleteCpe)
}

func getAllCpes(c echo.Context) error {
	var cpes []database.Cpe
	limit, err := strconv.Atoi(c.Param("limit"))
	if err != nil {
		limit = 10
	}
	result := dbClient.Limit(limit).Find(&cpes)
	if result.Error != nil {
		return result.Error
	}
	return c.JSON(http.StatusOK, cpes)
}

func getCpe(c echo.Context) error {
	var cpe database.Cpe
	id, _ := strconv.Atoi(c.Param("id"))
	result := dbClient.First(&cpe, "id = ?", id)
	if result.RowsAffected == 0 {
		return c.JSON(http.StatusNotFound, ApiError{Message: "Record not found"})
	}
	return c.JSON(http.StatusOK, cpe)
}

func addCpe(c echo.Context) error {
	cpe := new(database.Cpe)
	if err := c.Bind(cpe); err != nil {
		return err
	}
	if cpe.Name == "" || cpe.Cpe == "" {
		return c.JSON(http.StatusBadRequest, ApiError{Message: "Invalid request data"})
	}
	dbClient.Save(cpe)
	return c.JSON(http.StatusCreated, cpe)
}

func updateCpe(c echo.Context) error {
	cpe := new(database.Cpe)
	if err := c.Bind(cpe); err != nil {
		return err
	}
	if cpe.Name == "" || cpe.Cpe == "" {
		return c.JSON(http.StatusBadRequest, ApiError{Message: "Invalid request data"})
	}
	dbClient.Save(cpe)
	return c.JSON(http.StatusOK, cpe)
}

func deleteCpe(c echo.Context) error {
	var cpe database.Cpe
	id, _ := strconv.Atoi(c.Param("id"))
	result := dbClient.First(&cpe, "id = ?", id)
	if result.RowsAffected == 0 {
		return c.JSON(http.StatusNotFound, ApiError{Message: "Record not found"})
	}
	result = dbClient.Delete(&cpe)
	if result.Error != nil {
		return c.JSON(http.StatusBadRequest, ApiError{Message: result.Error.Error()})
	}
	return c.JSON(http.StatusOK, cpe)
}
