package main

import (
	"cve-manager/api"
	"cve-manager/database"
	"cve-manager/scheduler"
	"embed"
	"io/fs"
	"os"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	log "github.com/sirupsen/logrus"
)

//go:embed static/*
var embededFiles embed.FS

func main() {
	setupLogger()
	database.InitDatabase()
	scheduler.CreateScheduler(60)
	router := setupEcho()
	log.Infof("Starting server on :8080")
	if err := router.Start(":8080"); err != nil {
		log.Fatalf("%w", err)
	}
}

func setupEcho() *echo.Echo {
	router := echo.New()
	router.HideBanner = true
	router.HidePort = true
	router.StaticFS("/", getFileSystem(false))
	api.SetupAPI(router)

	router.Use(middleware.Recover())
	router.Use(middleware.RequestLoggerWithConfig(middleware.RequestLoggerConfig{
		LogURI:    true,
		LogStatus: true,
		LogMethod: true,
		LogValuesFunc: func(c echo.Context, values middleware.RequestLoggerValues) error {
			log.WithFields(log.Fields{
				"URI":    values.URI,
				"Method": values.Method,
				"Code":   values.Status,
			}).Info("HTTP request")

			return nil
		},
	}))
	return router
}

func getFileSystem(useOS bool) fs.FS {
	if useOS {
		log.Print("using live mode")
		return os.DirFS("static/browser")
	}

	log.Print("using embed mode")
	static, err := fs.Sub(embededFiles, "static/browser")
	if err != nil {
		panic(err)
	}

	return static
}

func setupLogger() {
	// log.SetFormatter(&log.JSONFormatter{})
	log.SetLevel(log.InfoLevel)
}
